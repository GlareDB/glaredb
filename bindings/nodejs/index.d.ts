/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface ConnectOptions {
  spillPath?: string
  disableTls?: boolean
  cloudAddr?: string
  location?: string
  storageOptions?: Record<string, string>
}
/** Connect to a GlareDB database. */
export function connect(dataDirOrCloudUrl?: string | undefined | null, options?: ConnectOptions | undefined | null): Promise<Connection>
/** A connected session to a GlareDB database. */
export class Connection {
  /**
   * Returns a default connection to the global in-memory database.
   *
   * The database is only initialized once, and all subsequent calls
   * will return the same connection, and therefore have access to the
   * same data and database.
   */
  static defaultInMemory(): Promise<Connection>
  /**
   * Run a SQL operation against a GlareDB database.
   *
   * All operations that write or modify data are executed
   * directly, but all query operations run lazily when you process
   * their results with `show`, `toArrow`, or
   * `toPolars`, or call the `execute` method.
   *
   * # Examples
   *
   * Show the output of a query.
   *
   * ```javascript
   * import glaredb from "@glaredb/glaredb"
   *
   * let con = glaredb.connect()
   * let cursor = await con.sql('select 1');
   * await cursor.show()
   * ```
   *
   * Convert the output of a query to a Pandas dataframe.
   *
   * ```javascript
   * import glaredb from "@glaredb/glaredb"
   *
   * let con = glaredb.connect()
   * ```
   *
   * Execute the query to completion, returning no output. This is useful
   * when the query output doesn't matter, for example, creating a table or
   * inserting data into a table.
   *
   * ```javascript
   * import glaredb from "@glaredb/glaredb"
   *
   * con = glaredb.connect()
   * await con.sql('create table my_table (a int)').then(cursor => cursor.execute())
   * ```
   */
  sql(query: string): Promise<JsLogicalPlan>
  /**
   * Run a PRQL query against a GlareDB database. Does not change
   * the state or dialect of the connection object.
   *
   * ```javascript
   * import glaredb from "@glaredb/glaredb"
   *
   * let con = glaredb.connect()
   * let cursor = await con.sql('from my_table | take 1');
   * await cursor.show()
   * ```
   *
   * All operations execute lazily when their results are
   * processed.
   */
  prql(query: string): Promise<JsLogicalPlan>
  /**
   * Execute a query.
   *
   * # Examples
   *
   * Creating a table.
   *
   * ```js
   * import glaredb from "@glaredb/glaredb"
   *
   * con = glaredb.connect()
   * con.execute('create table my_table (a int)')
   * ```
   */
  execute(query: string): Promise<void>
  /** Close the current session. */
  close(): Promise<void>
}
export class JsLogicalPlan {
  toString(): string
  show(): Promise<void>
  execute(): Promise<void>
  toIpc(): Promise<Buffer>
  /**
   * Convert to a Polars DataFrame.
   * "nodejs-polars" must be installed as a peer dependency.
   * See https://www.npmjs.com/package/nodejs-polars
   */
  toPolars(): pl.DataFrame
  /**
   * Convert to an "apache-arrow" Table.
   * "apache-arrow" must be installed as a peer dependency.
   * See https://www.npmjs.com/package/apache-arrow
   */
  toArrow(): arrow.Table<any>
}
