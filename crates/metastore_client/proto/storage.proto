// Defintions for objects that get persisted to object storage.
//
// The structure of catalogs looks something like the following:
//
// lease      -> LeaseInformation
// metadata   -> CatalogMetadate
// catalog.0  -> PersistedCatalog
// catalog.1  -> PersistedCatalog
// ...
// catalog.23 -> PersistedCatalog
//
// - 'lease' facilitates locking the catalog.
// - 'metadata' stores catalog metadata.
// - 'catalog.<version>' is a blob containing the current database state at some
//   version.
//
// **Persisted catalogs should only contain user data.** Builtins are placed
// into database catalogs when it gets loaded into memory. This allows us to
// make arbitrary changes to builtin objects (within reason). See `builtins.rs`
// for current definition of builtin objects.
//
// Catalog initialization:
//
// A catalog will be intialized with a lease object, metadata object, and
// catalog object at version 0. Version 0 of the catalog is a valid catalog.
//
// Multiple calls to initialize for the catalog are safe.
//
// Catalog read flow:
//
// 1. Read metadata, grab the latest catalog version number (note that no
//    locking is needed).
// 2. Read the catalog blob using the version provided in step 1.
//
// No leasing/locking is necessary during reads because GCS provides object
// atomicity, meaning we can read the 'metadata' object even if it's being
// written to. And since we don't delete old catalog versions, we can guarantee
// that the version we want to read exists even if a different process is
// concurrently writing an updated version.
//
// Catalog write flow:
//
// 1. Obtain lease.
// 2. Read stored metadata, ensure we are making modifications to the most up to
//    date version of the catalog.
// 3. Write updated catalog temp object.
// 4. Write updated metadata to temp object.
// 5. Rename catalog temp object.
// 6. Rename metadata temp object.
//
// Writes to the catalog requires obtaining the lease for catalog, and must be
// held for the duration of the update. A new catalog is only visible once the
// 'metadata' object has been renamed.
//
// If a catalog write fails between steps 5 and 6, the updated catalog will
// never be read by any other processes, since the 'latest_version' field in the
// metadata object is the source of truth for what version is the latest
// version.

syntax = "proto3";

package metastore.storage;

import "google/protobuf/timestamp.proto";
import "catalog.proto";

message LeaseInformation {
  enum State {
    UNKOWN = 0;
    UNLOCKED = 1;
    LOCKED = 2;
  }
  // Current state of the lease.
  State state = 1;

  // Monotonically increasing generation of the lock.
  uint64 generation = 2;

  // Expiration of the lease. May be continually updated.
  //
  // If the state of the lock is 'LOCKED', and we're past this timestamp, then
  // the lock can be taken by another process. Processes should be updating this
  // in the background.
  //
  // This protects against a process acquiring the lock then crashing, causing
  // the lock to never be unlocked.
  google.protobuf.Timestamp expires_at = 3;

  // UUID of the process holding this lock. May be empty if the lock state is
  // 'UNLOCKED'.
  bytes held_by = 4;

  // next: 5
}

message CatalogMetadata {
  // Latest version of the persisted catalog. Used to build the object name for
  // the catalog blob.
  uint64 latest_version = 1;

  // Byte serialized UUID for the process that last wrote this metadata.
  bytes last_written_by = 2;
}

// The catalog as it exists in object storage.
message PersistedCatalog {
  catalog.CatalogState state = 1;
  // State that should be persisted that's not already part of the catalog
  // state.
  ExtraState extra = 2;
}

message ExtraState {
  // Persisted oid counter. Used for oid generation for new database objects.
  uint32 oid_counter = 1;
}
