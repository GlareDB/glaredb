// Cross compute-node cluster communication service definition.
//
// Changes to these definitions do not need to be backwards compatible.

syntax = "proto3";

package sqlexec.clustercom;

// Message for notifying other nodes in the cluster about a change to particular
// database.
message EmitDatabaseEventRequest {
  // ID of the database that this change corresponds to.
  bytes db_id = 1;

  // The event to emit to all other nodes.
  oneof event { CatalogMutated catalog_mutated = 2; }
}

message CatalogMutated {}

message EmitDatabaseEventResponse {}

// Emit a message to other nodes to add or remove members from the cluster.
message MembershipChangeRequest {
  // Addresses for nodes to add to membership.
  repeated string to_add = 1;
  // Addresses for nodes to remove.
  repeated string to_remove = 2;
}

message MembershipChangeResponse {}

service ClusterComService {
  rpc MembershipChange(MembershipChangeRequest)
      returns (MembershipChangeResponse);

  // Emit an event for a database.
  //
  // This can be safely ignored if the recipient doesn't have any state
  // related to the database.
  rpc EmitDatabaseEvent(EmitDatabaseEventRequest)
      returns (EmitDatabaseEventResponse);
}
