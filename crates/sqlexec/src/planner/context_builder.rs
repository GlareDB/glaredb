use crate::context::SessionContext;
use crate::functions::BuiltinScalarFunction;
use crate::planner::dispatch::SessionDispatcher;
use crate::planner::errors::PlanError;
use datafusion::arrow::datatypes::DataType;
use datafusion::common::OwnedTableReference;
use datafusion::config::ConfigOptions;
use datafusion::datasource::DefaultTableSource;
use datafusion::datasource::TableProvider;
use datafusion::error::{DataFusionError, Result as DataFusionResult};
use datafusion::logical_expr::AggregateUDF;
use datafusion::logical_expr::ScalarUDF;
use datafusion::logical_expr::TableSource;
use datafusion::sql::planner::object_name_to_table_reference;
use datafusion::sql::planner::ContextProvider;
use datafusion::sql::sqlparser::ast::{self, Visitor};
use datafusion::sql::TableReference;
use sqlparser::ast::Visit;
use std::collections::{HashMap, HashSet};
use std::ops::ControlFlow;
use std::sync::Arc;

/// Helper for building a context provider for use with Datafusion's SQL
/// planner.
pub struct PlanContextBuilder<'a> {
    ctx: &'a SessionContext,
}

impl<'a> PlanContextBuilder<'a> {
    pub fn new(ctx: &'a SessionContext) -> Self {
        PlanContextBuilder { ctx }
    }

    /// Build a context suitable for planning a given sql statement.
    ///
    /// Under the hood, this will get all table providers from the session
    /// context that's taking part in the query.
    pub async fn build_plan_context(
        &self,
        statement: &ast::Statement,
    ) -> Result<PartialContextProvider<'a>, PlanError> {
        let mut visitor = RelationVistor::default();
        statement.visit(&mut visitor);
        let relations = visitor.0;

        let normalize = self
            .ctx
            .get_df_state()
            .config_options()
            .sql_parser
            .enable_ident_normalization;

        let references = relations
            .into_iter()
            .map(|rel| object_name_to_table_reference(rel, normalize))
            .collect::<Result<Vec<_>, _>>()?;

        let mut providers = HashMap::new();
        for reference in &references {
            // Note that this should match the string generated by
            // `reference_to_string`.
            let s = reference.to_string(); // TODO: Don't create string?

            // Already have table provider.
            if providers.contains_key(&s) {
                continue;
            }

            let prov = self.table_for_reference(reference).await?;
            providers.insert(s, prov);
        }

        Ok(PartialContextProvider {
            providers,
            ctx: self.ctx,
        })
    }

    // Find a table provider the given reference, taking into account the
    // session's search path.
    async fn table_for_reference(
        &self,
        reference: &OwnedTableReference,
    ) -> Result<Arc<dyn TableProvider>, PlanError> {
        let dispatcher = SessionDispatcher::new(self.ctx);
        match reference.as_table_reference() {
            TableReference::Bare { table } => {
                for schema in self.ctx.implicit_search_path_iter() {
                    match dispatcher.dispatch_access(schema, &table).await {
                        Ok(table) => return Ok(table),
                        Err(e) if e.should_try_next_schema() => (), // Continue to next schema in search path.
                        Err(e) => {
                            return Err(PlanError::FailedToCreateTableProvider {
                                reference: reference.to_string(),
                                e,
                            });
                        }
                    }
                }
                Err(PlanError::FailedToFindTableForReference {
                    reference: reference.to_string(),
                })
            }
            TableReference::Full { schema, table, .. }
            | TableReference::Partial { schema, table } => {
                let table = dispatcher.dispatch_access(&schema, &table).await?;
                Ok(table)
            }
        }
    }
}

/// Partial context provider with table providers required to fulfill a single
/// query.
///
/// NOTE: While `ContextProvider` is for _logical_ planning, DataFusion will
/// actually try to downcast the `TableSource` to a `TableProvider` during
/// physical planning. This only works with `DefaultTableSource` which is what
/// this adapter uses.
pub struct PartialContextProvider<'a> {
    providers: HashMap<String, Arc<dyn TableProvider>>,
    ctx: &'a SessionContext,
}

impl<'a> ContextProvider for PartialContextProvider<'a> {
    fn get_table_provider(&self, name: TableReference) -> DataFusionResult<Arc<dyn TableSource>> {
        let name = reference_to_string(name); // TODO: Don't create string?

        // It's a bug to have a missing provider here. It means we missed
        // resolving the table before we started SQL planning.
        let provider = self.providers.get(&name).ok_or_else(|| {
            DataFusionError::Plan(format!(
                "Context provider for SQL planner is missing a table: {}",
                name
            ))
        })?;

        Ok(Arc::new(DefaultTableSource::new(provider.clone())))
    }

    fn get_function_meta(&self, name: &str) -> Option<Arc<ScalarUDF>> {
        // TODO: We can build these async too.
        BuiltinScalarFunction::try_from_name(name).map(|f| Arc::new(f.build_scalar_udf(self.ctx)))
    }

    fn get_variable_type(&self, _variable_names: &[String]) -> Option<DataType> {
        None
    }

    fn get_aggregate_meta(&self, _name: &str) -> Option<Arc<AggregateUDF>> {
        None
    }

    fn options(&self) -> &ConfigOptions {
        self.ctx.get_df_state().config_options()
    }
}

fn reference_to_string(r: TableReference) -> String {
    match r {
        TableReference::Bare { table } => format!("{table}"),
        TableReference::Partial { schema, table } => format!("{schema}.{table}"),
        TableReference::Full {
            catalog,
            schema,
            table,
        } => format!("{catalog}.{schema}.{table}"),
    }
}

#[derive(Debug, Default)]
struct RelationVistor(HashSet<ast::ObjectName>);

impl Visitor for RelationVistor {
    type Break = ();

    fn pre_visit_relation(&mut self, relation: &ast::ObjectName) -> ControlFlow<()> {
        if !self.0.contains(relation) {
            self.0.insert(relation.clone());
        }
        ControlFlow::Continue(())
    }
}
