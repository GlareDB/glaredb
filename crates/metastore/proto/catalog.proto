// Catalog type definitions.

syntax = "proto3";

package metastore.catalog;

import "arrow.proto";

message CatalogState {
  // Database that this catalog is for (UUID).
  bytes db_id = 1;

  // Version of this catalog.
  uint64 version = 2;

  // All entries in this catalog.
  //
  // ID -> Entry
  map<uint32, CatalogEntry> entries = 3;

  // next: 4
}

// Possible top-level catalog entries.
message CatalogEntry {
  oneof entry {
    SchemaEntry schema = 1;
    TableEntry table = 2;
    ViewEntry view = 3;
    ConnectionEntry connection = 4;
  }
}

// Metadata for every entry in the catalog.
message EntryMeta {
  // Possible entry types in the catalog.
  //
  // Each entry of this type shares the same ID space.
  enum EntryType {
    // Unknown catalog entry. We should error if this is encountered.
    UNKNOWN = 0;
    // Database schemas.
    SCHEMA = 1;
    // Database tables.
    TABLE = 2;
    // External database tables.
    EXTERNAL_TABLE = 3;
    // Database views.
    VIEW = 4;
    // Connections to external data sources.
    CONNECTION = 5;
  }

  // Type of the entry.
  EntryType entry_type = 1;

  // ID of the entry. This id must be unique within the database, and will act
  // similarly to Postgres' OIDs.
  //
  // System entries have well-known IDs.
  uint32 id = 2;

  // ID of the parent entry.
  //
  // For tables, views, and connections, the parent id will be the schema id.
  //
  // Schemas are a special case, and have a parent id of 0.
  uint32 parent = 3;

  // Name of this entry.
  string name = 4;

  // next: 5
}

message SchemaEntry {
  EntryMeta meta = 1;

  // next: 2
}

message TableEntry {
  EntryMeta meta = 1;

  // Columns in the table.
  repeated ColumnDefinition columns = 2;

  // next: 3
}

// Supported external table types.
//
// Enum values must match the values for `ConnectionType`.
enum ExternalTableType {
  EXTERNAL_TABLE_TYPE_UNKNOWN = 0;
  EXTERNAL_TABLE_TYPE_DEBUG = 1;
  EXTERNAL_TABLE_TYPE_POSTGRES = 2;
  EXTERNAL_TABLE_TYPE_BIGQUERY = 3;
  EXTERNAL_TABLE_TYPE_GCS = 4;
  EXTERNAL_TABLE_TYPE_S3 = 5;
  EXTERNAL_TABLE_TYPE_LOCAL = 6;
}

message ExternalTableEntry {
  EntryMeta meta = 1;

  // Type of external table.
  ExternalTableType table_type = 2;

  // ID to the connection to use.
  uint32 connection_id = 3;

  // Table specific options to use when connecting to the external table.
  TableOptions options = 4;

  // next: 5
}

message TableOptions {
  oneof options {
    TableOptionsDebug debug = 1;
    TableOptionsPostgres postgres = 2;
  }
}

message TableOptionsDebug { string table_type = 1; }

message TableOptionsPostgres {
  string schema = 1;
  string table = 2;
}

message ColumnDefinition {
  // Name of the column in the table.
  string name = 1;

  // Ordinal of the column in the table.
  uint32 ord = 2;

  // Field is nullable.
  bool nullable = 3;

  // Arrow type for the field.
  //
  // Note this will likely need to be expanded for complex types.
  arrow.ArrowType arrow_type = 4;

  // next: 5
}

message ViewEntry {
  EntryMeta meta = 1;

  // The sql statement for materializing the view.
  string sql = 2;

  // next: 3
}

// Supported connection types.
//
// Enum values must match the values for `ExternalTableType`. Note that there
// may be more types for connections than table types (e.g. for SSH tunnels).
enum ConnectionType {
  CONNECTION_TYPE_UNKNOWN = 0;
  CONNECTION_TYPE_DEBUG = 1;
  CONNECTION_TYPE_POSTGRES = 2;
  CONNECTION_TYPE_BIGQUERY = 3;
  CONNECTION_TYPE_GCS = 4;
  CONNECTION_TYPE_S3 = 5;
  CONNECTION_TYPE_LOCAL = 6;
}

message ConnectionEntry {
  EntryMeta meta = 1;
  ConnectionType connection_type = 2;

  // Details about this connection.
  ConnectionDetails details = 3;

  // next: 4
}

message ConnectionDetails {
  oneof connection {
    ConnectionDebug debug = 1;
    ConnectionPostgres postgres = 2;
  }

  // next: 3
}

message ConnectionDebug {}

message ConnectionPostgres { string connection_string = 1; }
