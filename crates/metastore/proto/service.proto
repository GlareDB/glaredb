// Metastore service definition.

syntax = "proto3";

package metastore.service;

import "catalog.proto";

message FetchCatalogRequest {
  // ID of the database catalog to fetch.
  string db_id = 1;
}

message FetchCatalogResponse { catalog.DatabaseCatalog catalog = 1; }

// The result of a catalog mutation request (add, drop, alter).
message CatalogMutateStatus {
  enum Status {
    UNKNOWN = 0;
    // Mutation applied.
    APPLIED = 1;
    // Mutation rejected.
    REJECTED = 2;
  }

  // Status of the mutation.
  Status status = 1;

  // The current state of the catalog as witnessed by metastore.
  //
  // If the mutation was accepted, this catalog will included that mutation. If
  // the mutation was rejected, this catalog will not have that mutation
  // applied. In either case, this catalog should replace any stale catalog.
  catalog.DatabaseCatalog catalog = 2;
}

message CreateEntryRequest {
  oneof request {
    CreateSchema schema = 1;
    CreateView view = 2;
  }
}

// Create a new schema.
message CreateSchema {
  string name = 1;
  // Do not error if the schema already exists.
  bool if_not_exists = 2;
}

// Create a new view.
message CreateView {
  string name = 1;
  string sql = 2;
}

message CreateEntryResponse { CatalogMutateStatus status = 1; }

message DropEntryRequest {}

message DropEntryResponse { CatalogMutateStatus status = 1; }

message AlterEntryRequest {}

message AlterEntryResponse { CatalogMutateStatus status = 1; }

service MetastoreService {
  // Fetch the catalog for some database.
  //
  // The returned catalog will be the latest catalog that this metastore node
  // knows about.
  rpc FetchCatalog(FetchCatalogRequest) returns (FetchCatalogResponse);

  // Create an entry in the catalog.
  rpc CreateEntry(CreateEntryRequest) returns (CreateEntryResponse);

  // Drop an entry from the catalog.
  rpc DropEntry(DropEntryRequest) returns (DropEntryResponse);

  // Alter an entry in the catalog.
  rpc AlterEntry(AlterEntryRequest) returns (AlterEntryResponse);
}
