// Arrow type definitions.
//
// Bootstrapped from datafusion.

syntax = "proto3";

package metastore.arrow;

message Schema { repeated Field columns = 1; }

message Field {
  // Name of the field.
  string name = 1;
  ArrowType arrow_type = 2;
  bool nullable = 3;
  // For complex data types like structs, unions.
  repeated Field children = 4;
}

message FixedSizeBinary { int32 length = 1; }

message Timestamp {
  TimeUnit time_unit = 1;
  string timezone = 2;
}

enum DateUnit {
  Day = 0;
  DateMillisecond = 1;
}

enum TimeUnit {
  Second = 0;
  Millisecond = 1;
  Microsecond = 2;
  Nanosecond = 3;
}

enum IntervalUnit {
  YearMonth = 0;
  DayTime = 1;
  MonthDayNano = 2;
}

message Decimal {
  reserved 1, 2;
  uint32 precision = 3;
  int32 scale = 4;
}

message List { Field field_type = 1; }

message FixedSizeList {
  Field field_type = 1;
  int32 list_size = 2;
}

message Dictionary {
  ArrowType key = 1;
  ArrowType value = 2;
}

message Struct { repeated Field sub_field_types = 1; }

enum UnionMode {
  sparse = 0;
  dense = 1;
}

message Union {
  repeated Field union_types = 1;
  UnionMode union_mode = 2;
  repeated int32 type_ids = 3;
}

message ScalarListValue {
  // encode null explicitly to distinguish a list with a null value
  // from a list with no values)
  bool is_null = 3;
  Field field = 1;
  repeated ScalarValue values = 2;
}

message ScalarTime32Value {
  oneof value {
    int32 time32_second_value = 1;
    int32 time32_millisecond_value = 2;
  };
}

message ScalarTime64Value {
  oneof value {
    int64 time64_microsecond_value = 1;
    int64 time64_nanosecond_value = 2;
  };
}

message ScalarTimestampValue {
  oneof value {
    int64 time_microsecond_value = 1;
    int64 time_nanosecond_value = 2;
    int64 time_second_value = 3;
    int64 time_millisecond_value = 4;
  };
  string timezone = 5;
}

message ScalarDictionaryValue {
  ArrowType index_type = 1;
  ScalarValue value = 2;
}

message IntervalMonthDayNanoValue {
  int32 months = 1;
  int32 days = 2;
  int64 nanos = 3;
}

message StructValue {
  // Note that a null struct value must have one or more fields, so we
  // encode a null StructValue as one witth an empty field_values
  // list.
  repeated ScalarValue field_values = 2;
  repeated Field fields = 3;
}

message ScalarFixedSizeBinary {
  bytes values = 1;
  int32 length = 2;
}

message ScalarValue {
  reserved 19, 18, 16;

  // was PrimitiveScalarType null_value = 19;

  oneof value {
    // was PrimitiveScalarType null_value = 19;
    // Null value of any type
    ArrowType null_value = 33;

    bool bool_value = 1;
    string utf8_value = 2;
    string large_utf8_value = 3;
    int32 int8_value = 4;
    int32 int16_value = 5;
    int32 int32_value = 6;
    int64 int64_value = 7;
    uint32 uint8_value = 8;
    uint32 uint16_value = 9;
    uint32 uint32_value = 10;
    uint64 uint64_value = 11;
    float float32_value = 12;
    double float64_value = 13;
    // Literal Date32 value always has a unit of day
    int32 date_32_value = 14;
    ScalarTime32Value time32_value = 15;
    ScalarListValue list_value = 17;
    // WAS: ScalarType null_list_value = 18;

    Decimal128 decimal128_value = 20;
    int64 date_64_value = 21;
    int32 interval_yearmonth_value = 24;
    int64 interval_daytime_value = 25;
    ScalarTimestampValue timestamp_value = 26;
    ScalarDictionaryValue dictionary_value = 27;
    bytes binary_value = 28;
    bytes large_binary_value = 29;
    ScalarTime64Value time64_value = 30;
    IntervalMonthDayNanoValue interval_month_day_nano = 31;
    StructValue struct_value = 32;
    ScalarFixedSizeBinary fixed_size_binary_value = 34;
  }
}

message Decimal128 {
  bytes value = 1;
  int64 p = 2;
  int64 s = 3;
}

// Serialized data type
message ArrowType {
  oneof arrow_type_enum {
    EmptyMessage NONE = 1;
    EmptyMessage BOOL = 2;
    EmptyMessage UINT8 = 3;
    EmptyMessage INT8 = 4;
    EmptyMessage UINT16 = 5;
    EmptyMessage INT16 = 6;
    EmptyMessage UINT32 = 7;
    EmptyMessage INT32 = 8;
    EmptyMessage UINT64 = 9;
    EmptyMessage INT64 = 10;
    EmptyMessage FLOAT16 = 11;
    EmptyMessage FLOAT32 = 12;
    EmptyMessage FLOAT64 = 13;
    EmptyMessage UTF8 = 14;
    EmptyMessage LARGE_UTF8 = 32;
    EmptyMessage BINARY = 15;
    int32 FIXED_SIZE_BINARY = 16;
    EmptyMessage LARGE_BINARY = 31;
    EmptyMessage DATE32 = 17;
    EmptyMessage DATE64 = 18;
    TimeUnit DURATION = 19;
    Timestamp TIMESTAMP = 20;
    TimeUnit TIME32 = 21;
    TimeUnit TIME64 = 22;
    IntervalUnit INTERVAL = 23;
    Decimal DECIMAL = 24;
    List LIST = 25;
    List LARGE_LIST = 26;
    FixedSizeList FIXED_SIZE_LIST = 27;
    Struct STRUCT = 28;
    Union UNION = 29;
    Dictionary DICTIONARY = 30;
  }
}

// Useful for representing an empty enum variant in rust
//  E.G. enum example{One, Two(i32)}
//  maps to
//  message example{
//     oneof{
//         EmptyMessage One = 1;
//         i32 Two = 2;
//    }
// }
message EmptyMessage {}
