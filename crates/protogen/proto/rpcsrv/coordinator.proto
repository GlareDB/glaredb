// Service definition for coordinator for distributed execution.

// TODO: Combine/split with service.proto as necessary.

syntax = "proto3";

package rpcsrv.coordinator;

import "metastore/catalog.proto";
import "rpcsrv/common.proto";

message RegisterWorkerRequest {
  bytes node_id = 1; // UUID
}

message RegisterWorkerResponse {}

message DeregisterWorkerRequest {
  bytes node_id = 1; // UUID
}

message DeregisterWorkerResponse {}

message HeartbeatRequest {
  bytes node_id = 1; // UUID
}

message HeartbeatResponse {}

message PollWorkRequest {
  bytes node_id = 1; // UUID
}

message PollWorkResponse {
  common.SessionContextConfig config = 1;
  bytes work_id = 2; // UUID

  oneof response {
    common.DispatchAccess dispatch = 3;
    common.PhysicalPlanExecute plan = 4;
  }
}

message InstallBatchStreamResponse {}

service CoordinatorService {
  // Register a worker with the coordinator.
  rpc RegisterWorker(RegisterWorkerRequest) returns (RegisterWorkerResponse);

  // Deregister a worker with the coordinator.
  //
  // Should be called on node shutdown (mostly as an cleanup optimization,
  // correctness should not be affected if this isn't called).
  rpc DeregisterWorker(DeregisterWorkerRequest)
      returns (DeregisterWorkerResponse);

  // Periodic heartbeat from workers.
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // Poll the coordinator for work.
  rpc PollWork(PollWorkRequest) returns (PollWorkResponse);

  // Installs a batch stream on the coordinator.
  rpc InstallBatchStream(stream common.ExecutionBatchStream)
      returns (InstallBatchStreamResponse);
}
