// Service definition for rpcsrv.
//
// # Request routing
//
// ```
//                1.                 2.
//    client    ----->  rpcproxy   <---->   cloud
// (cli/python)           |
//                        | 3.
//                        â–¼
//                 compute node
//
// ```
//
// 1. Client makes request
//   - The client will place auth related metadata on the request
// 2. Proxy handles request
//   - The proxy pulls auth related metadata off the request and makes a request
//     to Cloud. Cloud returns back info on the database we're making a request
//     for, and where we should route the request.
// 3. Proxy sends authenticated request to compute node.
//
// # Authentication
//
// When making a request from the client to the proxy, certain authentication
// parameters need to be provided on the request metadata:
//
// - "user"
// - "password"
// - "db_name"
// - "org"
//
// These parameters are then used by the proxy to make a request to Cloud for
// connection authentication. The response from Cloud indicates if the
// connection is authenticated. Cloud also returns additional data about how to
// connect to the remote compute node.

syntax = "proto3";

package rpcsrv.service;

import "metastore/catalog.proto";
import "rpcsrv/common.proto";

// Storage config for the session.
message SessionStorageConfig { optional string gcs_bucket = 1; }

// Request for initializing a remote session from the client.
message InitializeSessionRequestFromClient {
  // Where's the auth? Auth params are always set in the request metadata. This
  // goes for all requests, not just for initializing a session. See comment at
  // top.

  // Database ID that can be set by an integration test (bypassing proxy).
  optional bytes test_db_id = 1;
}

// Request for initializing a session from the proxy.
//
// Fields in this request are generated based on what we receive back from
// Cloud.
message InitializeSessionRequestFromProxy {
  // Session storage config.
  SessionStorageConfig storage_conf = 2;

  // ID of database we're initializing a session for.
  bytes db_id = 3;

  // ID of the user that initialized the session.
  bytes user_id = 4;
}

// Request for initializing a session.
message InitializeSessionRequest {
  oneof request {
    // Request if sent by the client.
    InitializeSessionRequestFromClient client = 1;
    // Request if sent by the proxy.
    InitializeSessionRequestFromProxy proxy = 2;
  }
}

message InitializeSessionResponse {
  // Database for which the session was initialized
  bytes database_id = 1;
  // The initial catalog for the database.
  metastore.catalog.CatalogState catalog = 2;
  // User ID for which the session was initialized
  bytes user_id = 3;
}

message FetchCatalogRequest { bytes database_id = 1; }

message FetchCatalogResponse { metastore.catalog.CatalogState catalog = 1; }

// Dispatch the table access on remote server.
message DispatchAccessRequest {
  bytes database_id = 1;
  ResolvedTableReference table_ref = 2;
  repeated bytes args = 3;
  // gRPC doesn't really provide a way for Option<Vec<T>> or Option<Map<K,V>>
  // so we use a map and just check if it's empty or not in rust.
  map<string, bytes> options = 4;
}

// Execute a physical plan and get the stream.
message PhysicalPlanExecuteRequest {
  bytes database_id = 1;
  // The protobuf serialized physical plan.
  bytes physical_plan = 2;
  // User id (which is trying to execute the plan).
  //
  // Required for sending metrics.
  bytes user_id = 3;
}

message TableProviderResponse {
  bytes id = 1;
  bytes schema = 2;
}

message RecordBatchResponse {
  // Results of the execution.
  bytes arrow_ipc = 1;
}

message InternalTableReference {
  // OID of the table in the catalog.
  uint32 table_oid = 1;
}

message ExternalTableReference {
  string database = 1;
  string schema = 2;
  string name = 3;
}

message ResolvedTableReference {
  oneof reference {
    // Table exists in our catalog.
    InternalTableReference internal = 1;
    // Table exists in an external system that we need to contact.
    ExternalTableReference external = 2;
  }
}

message BroadcastExchangeResponse {}

service ExecutionService {
  // Initializes a remote session.
  rpc InitializeSession(InitializeSessionRequest)
      returns (InitializeSessionResponse);

  rpc FetchCatalog(FetchCatalogRequest) returns (FetchCatalogResponse);

  // Dispatch and create a table provider on the remote server.
  rpc DispatchAccess(DispatchAccessRequest) returns (TableProviderResponse);

  // Execute a physical plan.
  rpc PhysicalPlanExecute(PhysicalPlanExecuteRequest)
      returns (stream RecordBatchResponse);

  rpc BroadcastExchange(stream common.ExecutionResultBatch)
      returns (BroadcastExchangeResponse);
}
