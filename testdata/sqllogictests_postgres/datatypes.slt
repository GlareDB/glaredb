# Test if the datasource supports the different datatypes (and NULLs).

# Create an external table that connects to the datatypes table.
statement ok
CREATE EXTERNAL TABLE datatypes
	FROM postgres
	OPTIONS (
		connection_string = '${POSTGRES_CONN_STRING}',
		schema = 'public',
		table = 'datatypes'
	);

# Check if we can fetch contents of the datatype table.
query TIIIRRTTTTTTTTTTTTTTT
SELECT * FROM datatypes;
----
t     1     2     3     4.5   6.7   a     b     cde   fghi  {"a":[1,2]}  [{"b":null},{"c":true}]  292a485f-a56a-4938-8f1a-bbbbbbbbbbb1  \x62696e  1999-09-30 16:32:04  16:32:04  1999-09-30  1999-09-30 14:32:04+00  12345.678900000  12346.000000000  12345.678910000
NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL         NULL                     NULL                                  NULL      NULL                 NULL      NULL        NULL                    NULL             NULL             NULL
NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  NULL  1-01-01 00:00:00  NULL  NULL  1-01-01 00:00:00+00  NULL  NULL  NULL

halt

# validate external column catalog info
query TITTT
select column_name, column_index, data_type, pg_data_type, is_nullable
    from glare_catalog.external_columns c
    join glare_catalog.tables t
    on c.table_oid = t.oid
    where t.table_name = 'datatypes';
----
c1 0 Boolean Boolean t
c2 1 Int16 Int16 t
c3 2 Int32 Int32 t
c4 3 Int64 Int64 t
c5 4 Float32 Float32 t
c6 5 Float64 Float64 t
c7 6 Utf8 Utf8 t
c8 7 Utf8 Utf8 t
c9 8 Utf8 Utf8 t
c10 9 Utf8 Utf8 t
c11 10 Utf8 Utf8 t
c12 11 Utf8 Utf8 t
c13 12 Utf8 Utf8 t
c14 13 Binary Binary t
c15 14 Timestamp(Nanosecond, None) Timestamp(Nanosecond, None) t
c16 15 Time64(Nanosecond) Time64(Nanosecond) t
c17 16 Date32 Date32 t
c18 17 Timestamp(Nanosecond, Some("UTC")) Timestamp(Nanosecond, Some("UTC")) t
