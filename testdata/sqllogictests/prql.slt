# Tests adapted from PRQL's integration tests.
#
# The only changes that should be made here are ones to get the tests working in
# the SLT framework.

# Table setup
# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/data/chinook/schema.sql

statement ok
DROP TABLE IF EXISTS invoices;

statement ok
DROP TABLE IF EXISTS customers;

statement ok
DROP TABLE IF EXISTS employees;

statement ok
DROP TABLE IF EXISTS tracks;

statement ok
DROP TABLE IF EXISTS albums;

statement ok
DROP TABLE IF EXISTS genres;

statement ok
DROP TABLE IF EXISTS playlist_track;

statement ok
DROP TABLE IF EXISTS playlists;

statement ok
DROP TABLE IF EXISTS media_types;

statement ok
DROP TABLE IF EXISTS artists;

statement ok
DROP TABLE IF EXISTS invoice_items;

statement ok
CREATE TABLE invoices (
    invoice_id INTEGER,
    customer_id INTEGER,
    invoice_date TIMESTAMP,
    billing_address VARCHAR(255),
    billing_city VARCHAR(255),
    billing_state VARCHAR(255),
    billing_country VARCHAR(255),
    billing_postal_code VARCHAR(255),
    total REAL
);

statement ok
CREATE TABLE customers (
    customer_id INTEGER,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    company VARCHAR(255),
    address VARCHAR(255),
    city VARCHAR(255),
    state VARCHAR(255),
    country VARCHAR(255),
    postal_code VARCHAR(255),
    phone VARCHAR(255),
    fax VARCHAR(255),
    email VARCHAR(255),
    support_rep_id INTEGER
);

statement ok
CREATE TABLE employees (
    employee_id INTEGER,
    last_name VARCHAR(255),
    first_name VARCHAR(255),
    title VARCHAR(255),
    reports_to INTEGER,
    birth_date TIMESTAMP,
    hire_date TIMESTAMP,
    address VARCHAR(255),
    city VARCHAR(255),
    state VARCHAR(255),
    country VARCHAR(255),
    postal_code VARCHAR(255),
    phone VARCHAR(255),
    fax VARCHAR(255),
    email VARCHAR(255)
);

statement ok
CREATE TABLE tracks (
    track_id INTEGER,
    name VARCHAR(255),
    album_id INTEGER,
    media_type_id INTEGER,
    genre_id INTEGER,
    composer VARCHAR(255),
    milliseconds INTEGER,
    bytes INTEGER,
    unit_price REAL
);

statement ok
CREATE TABLE albums (album_id INTEGER, title VARCHAR(255), artist_id INTEGER);

statement ok
CREATE TABLE genres (genre_id INTEGER, name VARCHAR(255));

statement ok
CREATE TABLE playlist_track (playlist_id INTEGER, track_id INTEGER);

statement ok
CREATE TABLE playlists (playlist_id INTEGER, name VARCHAR(255));

statement ok
CREATE TABLE media_types (media_type_id INTEGER, name VARCHAR(255));

statement ok
CREATE TABLE artists (artist_id INTEGER, name VARCHAR(255));

statement ok
CREATE TABLE invoice_items (
    invoice_line_id INTEGER,
    invoice_id INTEGER,
    track_id INTEGER,
    unit_price REAL,
    quantity INTEGER
);

# Insert test data

statement ok
insert into invoices select * from './testdata/prql_integration/invoices.csv'

statement ok
insert into customers select * from './testdata/prql_integration/customers.csv'

statement ok
insert into employees select * from './testdata/prql_integration/employees.csv'

statement ok
insert into tracks select * from './testdata/prql_integration/tracks.csv'

statement ok
insert into albums select * from './testdata/prql_integration/albums.csv'

statement ok
insert into genres select * from './testdata/prql_integration/genres.csv'

statement ok
insert into playlist_track select * from './testdata/prql_integration/playlist_track.csv'

statement ok
insert into playlists select * from './testdata/prql_integration/playlists.csv'

statement ok
insert into media_types select * from './testdata/prql_integration/media_types.csv'

statement ok
insert into artists select * from './testdata/prql_integration/artists.csv'

statement ok
insert into invoice_items select * from './testdata/prql_integration/invoice_items.csv'

# Enable prql dialect
statement ok
set dialect = 'prql'

# Sanity checks

statement error sql parser error: Error compiling PRQL:
select * from glare_catalog.tables limit 1

statement ok
from glare_catalog.tables | take 1

# Begin integration tests copied from prql.

# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/aggregation.prql

# TODO: Missing string_agg function
# statement ok
# from tracks
# filter genre_id == 100
# derive empty_name = name == ''
# aggregate {sum track_id, concat_array name, every empty_name, any empty_name}

# TODO: Projection references non-aggregate values: Expression Column(Column {
# relation: Some(Bare { table: "tracks" }), name: "name" }) could not be
# resolved from available columns: SUM(tracks.track_id), BOOL_AND(tracks.name =
# Utf8("")), BOOL_OR(tracks.name = Utf8(""))
#
# query ITII
# from tracks
# filter genre_id == 100
# derive empty_name = name == ''
# aggregate {sum track_id, name, every empty_name, any empty_name}
# ----
# 0  1  0

# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/arithmetic.prql
query RRRRRRRRRRRRRRRRR
from [
    { id = 1, x_int =  13, x_float =  13.0, k_int =  5, k_float =  5.0 },
    { id = 2, x_int = -13, x_float = -13.0, k_int =  5, k_float =  5.0 },
    { id = 3, x_int =  13, x_float =  13.0, k_int = -5, k_float = -5.0 },
    { id = 4, x_int = -13, x_float = -13.0, k_int = -5, k_float = -5.0 },
]
select {
    id,
    x_int / k_int,
    x_int / k_float,
    x_float / k_int,
    x_float / k_float,
    q_ii = x_int // k_int,
    q_if = x_int // k_float,
    q_fi = x_float // k_int,
    q_ff = x_float // k_float,
    r_ii = x_int % k_int,
    r_if = x_int % k_float,
    r_fi = x_float % k_int,
    r_ff = x_float % k_float,
    (q_ii * k_int + r_ii | round 0),
    (q_if * k_float + r_if | round 0),
    (q_fi * k_int + r_fi | round 0),
    (q_ff * k_float + r_ff | round 0),
}
sort id
----
1  2.6   2.6   2.6   2.6   2   2   2   2   3   3   3   3   13   13   13   13
2  -2.6  -2.6  -2.6  -2.6  -2  -2  -2  -2  -3  -3  -3  -3  -13  -13  -13  -13
3  -2.6  -2.6  -2.6  -2.6  -2  -2  -2  -2  3   3   3   3   13   13   13   13
4  2.6   2.6   2.6   2.6   2   2   2   2   -3  -3  -3  -3  -13  -13  -13  -13

# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/cast.prql
query TR
from tracks
sort {-bytes}
select {
    name,
    bin = ((album_id | as REAL) * 99)
}
take 20
----
Through a Looking Glass                   22671
Occupation / Precipice                    22473
The Young Lords                           25047
The Man With Nine Lives                   25047
Dave                                      22869
The Magnificent Warriors                  25047
The Lost Warrior                          25047
Maternity Leave                           22869
Battlestar Galactica, Pt. 3               25047
The Woman King                            22473
Murder On the Rising Star                 25047
Through the Looking Glass, Pt. 2          22671
The Man from Tallahassee                  22671
Better Halves                             22572
Tricia Tanaka Is Dead                     22671
Experiment In Terra                       25047
The Gun On Ice Planet Zero, Pt. 2         25047
Lockdown                                  22869
Man of Science, Man of Faith (Premiere)   22869
Run!                                      22572

# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/constants_only.prql
query I
from genres
take 10
filter true
take 20
filter true
select d = 10
----
10
10
10
10
10
10
10
10
10
10

# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/distinct.prql
query II
from tracks
select {album_id, genre_id}
group tracks.* (take 1)
sort tracks.*
----
1    1
2    1
3    1
4    1
5    1
6    1
7    1
8    2
9    3
10   1
11   4
12   5
13   2
14   3
15   3
16   3
17   3
18   4
19   3
20   6
21   7
22   7
23   7
24   7
25   7
26   8
27   8
28   7
29   9
30   1
31   1
32   10
33   7
34   7
35   3
36   1
37   1
38   2
39   4
40   1
41   7
42   4
43   1
44   1
45   7
46   1
47   7
48   2
49   2
50   1
51   2
52   11
53   7
54   1
55   1
56   7
57   7
58   1
59   1
60   1
61   1
62   1
63   1
64   1
65   1
66   1
67   1
68   2
69   7
70   7
71   7
72   6
73   6
73   7
74   4
75   4
76   1
77   4
78   7
79   1
80   1
81   4
82   1
83   12
84   7
85   10
86   7
87   2
88   3
89   4
90   1
91   1
92   3
93   2
94   1
95   3
96   3
97   1
98   13
99   1
100  6
101  13
102  3
102  13
103  1
104  1
105  3
106  3
107  3
108  3
109  1
109  3
110  3
111  3
112  1
112  3
113  1
114  1
115  14
116  1
117  14
118  15
119  4
120  1
121  1
122  7
123  7
124  16
125  3
126  1
127  1
128  1
129  1
130  1
131  1
132  1
133  1
134  1
135  1
136  1
137  1
138  1
139  7
140  7
141  1
141  3
141  8
142  7
143  7
144  1
145  7
146  14
147  1
148  3
149  3
150  3
151  3
152  3
153  3
154  3
155  3
156  3
157  2
158  7
159  7
160  3
161  16
162  3
163  1
164  1
165  1
166  7
167  7
168  7
169  7
170  1
171  1
172  1
173  1
174  3
175  1
176  10
177  1
178  1
179  4
180  1
181  1
182  1
183  1
184  17
185  1
186  1
187  4
188  4
189  1
190  4
191  4
192  1
193  4
194  1
195  1
196  1
197  1
198  1
199  1
200  1
201  4
202  4
203  1
204  2
205  6
206  1
207  3
208  1
209  6
210  6
211  4
212  1
213  1
214  1
215  1
216  1
217  1
218  1
219  4
220  4
221  1
222  7
223  7
224  4
225  4
226  18
227  18
227  19
227  20
228  19
228  21
229  19
229  21
230  19
231  19
231  21
232  1
233  1
234  1
235  1
236  1
237  1
238  1
239  1
240  1
241  8
242  1
243  1
244  1
245  1
246  1
247  7
248  7
249  19
250  19
251  19
251  22
252  1
253  20
254  19
255  9
256  1
257  1
258  17
259  15
260  23
261  19
261  21
262  2
263  16
264  15
265  1
266  7
267  2
268  24
269  23
270  23
271  23
272  24
273  24
274  24
275  24
276  24
277  24
278  24
279  24
280  24
281  24
282  24
283  24
284  24
285  24
286  24
287  24
288  24
289  24
290  24
291  24
292  24
293  24
294  24
295  24
296  24
297  24
298  24
299  24
300  24
301  24
302  24
303  24
304  24
305  24
306  24
307  24
308  24
309  24
310  24
311  24
312  24
313  24
314  24
315  24
316  24
317  25
318  24
319  24
320  24
321  14
322  9
323  23
324  24
325  24
326  24
327  24
328  24
329  24
330  24
331  24
332  24
333  24
334  24
335  24
336  24
337  24
338  24
339  24
340  24
341  24
342  24
343  24
344  24
345  24
346  24
347  10

# TODO: Distinct on
# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/distinct_on.prql
# statement ok
# from tracks
# select {genre_id, media_type_id, album_id}
# group {genre_id, media_type_id} (sort {-album_id} | take 1)
# sort {-genre_id, media_type_id}

# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/genre_counts.prql
query I
let genre_count = (
    from genres
    aggregate {a = count name}
)
from genre_count
filter a > 0
select a = -a
----
-25

# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/group_all.prql
query ITR
from a=albums
take 10
join tracks (==album_id)
group {a.album_id, a.title} (aggregate price = ((sum tracks.unit_price)))
sort album_id
----
1  For Those About To Rock We Salute You  9.900000095367432
2  Balls to the Wall                      0.9900000095367432
3  Restless and Wild                      2.9700000286102297
4  Let There Be Rock                      7.920000076293945
5  Big Ones                               14.850000143051148
6  Jagged Little Pill                     12.870000123977662
7  Facelift                               11.880000114440918
8  Warner 25 Anos                         13.860000133514405
9  Plays Metallica By Four Cellos         7.920000076293945
10 Audioslave                             13.860000133514405

query II
from tracks
derive d = album_id + 1
group d (
    aggregate {
        n1 = (track_id | sum),
    }
)
sort d
take 10
select { d1 = d, n1 }
----
2   91
3   2
4   12
5   148
6   450
7   572
8   678
9   973
10  644
11  1281

query TTIIII
from i=invoices
join ii=invoice_items (==invoice_id)
derive {
    city = i.billing_city,
    street = i.billing_address,
}
group {city, street} (
    derive total = ii.unit_price * ii.quantity
    aggregate {
        num_orders = count_distinct i.invoice_id,
        num_tracks = sum ii.quantity,
        total_price = sum total,
    }
)
group {city} (
    sort street
    window expanding:true (
        derive {running_total_num_tracks = sum num_tracks}
    )
)
sort {city, street}
derive {num_tracks_last_week = lag 7 num_tracks}
select {
    city,
    street,
    num_orders,
    num_tracks,
    running_total_num_tracks,
    num_tracks_last_week
}
take 20
----
Amsterdam    Lijnbaansgracht 120bg   7  38 38 NULL
Bangalore    3,Raj Bhavan Road       6  36 36 NULL
Berlin       Barbarossastraße 19     7  38 38 NULL
Berlin       Tauentzienstraße 8      7  38 76 NULL
Bordeaux     9, Place Louis Barthou  7  38 38 NULL
Boston       69 Salem Street         7  38 38 NULL
Brasília     Qe 7 Bloco G            7  38 38 NULL
Brussels     Grétrystraat 63         7  38 38 38
Budapest     Erzsébet krt. 58.       7  38 38 36
Buenos Aires 307 Macacha Güemes      7  38 38 38
Chicago      162 E Superior Street   7  38 38 38
Copenhagen   Sønder Boulevard 51     7  38 38 38
Cupertino    1 Infinite Loop         7  38 38 38
Delhi        12,Community Centre     7  38 38 38
Dijon        68, Rue Jouvence        7  38 38 38
Dublin       3 Chatham Street        7  38 38 38
Edinburgh    110 Raeburn Pl          7  38 38 38
Edmonton     8210 111 ST NW          7  38 38 38
Fort Worth   2211 W Berry Street     7  38 38 38
Frankfurt    Berger Straße 10        7  38 38 38

# TODO: Recursive CTEs
# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/loop.prql
# statement ok
# from [{n = 1}]
# select n = n - 2
# loop (filter n < 4 | select n = n + 1)
# select n = n * 2
# sort n

# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/pipelines.prql
query TT
from tracks
filter (name ~= "Love")
filter ((milliseconds / 1000 / 60) | in 3..4)
sort track_id
take 1..15
select {name, composer}
----
My Love                                        Jauperi/Zeu Góes
The Girl I Love She Got Long Black Wavy Hair   Jimmy Page/John Bonham/John Estes/John Paul Jones/Robert Plant
Love Gun                                       Paul Stanley
Do You Love Me                                 Paul Stanley, B. Ezrin, K. Fowley
Calling Dr. Love                               Gene Simmons
Um Love                                        (empty)
Love Child                                     Bolin/Coverdale
Love Conquers All                              Blackmore, Glover, Turner
You Can't Do it Right (With the One You Love)  D.Coverdale/G.Hughes/Glenn Hughes/R.Blackmore/Ritchie Blackmore
She Loves Me Not                               Bill Gould/Mike Bordin/Mike Patton
Underwater Love                                Faith No More
Loves Been Good To Me                          rod mckuen
Love Or Confusion                              Jimi Hendrix
May This Be Love                               Jimi Hendrix
Do You Love Me                                 Paul Stanley, Bob Ezrin, Kim Fowley

# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/set_ops_remove.prql
query I
let distinct = rel -> (from t = _param.rel | group {t.*} (take 1))
from_text format:json '{ "columns": ["a"], "data": [[1], [2], [2], [3]] }'
distinct
remove (from_text format:json '{ "columns": ["a"], "data": [[1], [2]] }')
sort a
----
3

# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/sort.prql
query TTT
from e=employees
filter first_name != "Mitchell"
sort {first_name, last_name}
join manager=employees side:left (e.reports_to == manager.employee_id)
select {e.first_name, e.last_name, manager.first_name}
----
Andrew    Adams     Michael
Jane      Peacock   Nancy
Laura     Callahan  Michael
Margaret  Park      Nancy
Michael   Mitchell  Andrew
Nancy     Edwards   Andrew
Robert    King      Michael
Steve     Johnson   Nancy

# TODO: PRQL error: "function call expected {, but found ["
# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/switch.prql
# statement ok
# from tracks
# sort milliseconds
# select display = case [
#     composer != null => composer,
#     genre_id < 17 => 'no composer',
#     true => f'unknown composer'
# ]
# take 10

# TODO: Distinct on
# https://github.com/PRQL/prql/blob/main/crates/prql-compiler/tests/integration/queries/window.prql
# statement ok
# from tracks
# group genre_id (
#   sort milliseconds
#   derive {
#     num = row_number this,
#     total = count this,
#     last_val = last track_id,
#   }
#   take 10
# )
# sort {genre_id, milliseconds}
# select {track_id, genre_id, num, total, last_val}
# filter genre_id >= 22

query TTT
from (read_csv './testdata/prql_integration/employees.csv')
sort employee_id
select {employee_id, reports_to}
take 1
----
1  6


# Make sure we can switch back to normal sql.
statement ok
set dialect = 'sql'

statement ok
select * from glare_catalog.tables limit 1

