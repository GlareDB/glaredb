# Queries related pg catalog compatibility.

# Sanity check queries.

statement ok
select * from pg_catalog.pg_am;

statement ok
select * from pg_catalog.pg_attribute;

statement ok
select * from pg_catalog.pg_namespace;

statement ok
select * from pg_catalog.pg_class;

statement ok
select * from pg_catalog.pg_description;

statement ok
select * from pg_catalog.pg_database;

statement ok
select * from pg_catalog.pg_tables; 

statement ok
select * from pg_catalog.pg_views;

# We also implicitly include `pg_catalog` in the search path, so each of the
# above tables can also be reference with the bare table name.

statement ok
select * from pg_am;

statement ok
select * from pg_attribute;

statement ok
select * from pg_namespace;

statement ok
select * from pg_class;

statement ok
select * from pg_description;

statement ok
select * from pg_database;

statement ok
select * from pg_tables;

statement ok
select * from pg_views;

# Note that this doesn't stop us from creating tables with the same name
# (matches postgres behavior).

statement ok
set enable_debug_datasources to t;

statement ok
create schema pg_catalog_test;

statement ok
set search_path to pg_catalog_test;

statement ok
create external table pg_description from debug options (table_type = 'never_ending');

# Selecting from `pg_description` will select from the builtin table, not the
# table we just created.

statement ok
select objoid from pg_description;

# But our table will still be in the catalog.

query TT
select schema_name, table_name from glare_catalog.tables where table_name = 'pg_description' and schema_name = 'pg_catalog_test';
----
pg_catalog_test  pg_description


statement ok
select * from pg_catalog.pg_type;


# This is one of the queries postgres uses for tab completion
# see https://github.com/GlareDB/glaredb/issues/2393
statement ok 
SELECT 
  c.relname, 
  NULL::pg_catalog.text 
FROM pg_catalog.pg_class c 
WHERE c.relkind IN ('r', 'S', 'v', 'm', 'f', 'p') 
AND (c.relname) LIKE '%' 
AND pg_catalog.pg_table_is_visible(c.oid) 
AND c.relnamespace <> ( SELECT oid FROM pg_catalog.pg_namespace WHERE nspname = 'pg_catalog') UNION ALL 
SELECT NULL::pg_catalog.text, n.nspname 
FROM pg_catalog.pg_namespace n 
WHERE n.nspname LIKE '%' 
AND n.nspname NOT LIKE E'pg\\_%' 
LIMIT 1000;

# Another query postgres uses for tab completion
# see https://github.com/GlareDB/glaredb/issues/2393
statement ok
SELECT 
  c.relname, 
  n.nspname 
FROM 
  pg_catalog.pg_class c, 
  pg_catalog.pg_namespace n 
WHERE c.relnamespace = n.oid 
AND c.relkind IN ('r', 'S', 'v', 'm', 'f', 'p') 
AND (c.relname) LIKE '%' 
AND n.nspname = 'pg_catalog' 
LIMIT 1000;

statement ok
select * from pg_matviews;

# https://github.com/GlareDB/glaredb/issues/2475
statement ok
WITH table_privileges AS (
  SELECT
    NULL AS role,
    t.schemaname AS schema,
    t.tablename AS table,
    pg_catalog.has_table_privilege(
      current_user,
      concat( '"', t.schemaname, '"', '.', '"', t.tablename, '"' ),
      'SELECT'
    ) AS select ,
    pg_catalog.has_table_privilege(
      current_user,
      concat( '"', t.schemaname, '"', '.', '"', t.tablename, '"' ),
      'UPDATE'
    ) AS update ,
    pg_catalog.has_table_privilege(
      current_user,
      concat( '"', t.schemaname, '"', '.', '"', t.tablename, '"' ),
      'INSERT'
    ) AS insert ,
    pg_catalog.has_table_privilege(
      current_user,
      concat( '"', t.schemaname, '"', '.', '"', t.tablename, '"' ),
      'DELETE'
    ) AS delete 
  FROM
    pg_catalog.pg_tables AS t
  WHERE
    t.schemaname !~ '^pg_'
    AND t.schemaname <> 'information_schema'
    AND pg_catalog.has_schema_privilege(current_user, t.schemaname, 'USAGE')
)
SELECT
  t.*
FROM
  table_privileges AS t
WHERE
  t.select
  OR t.update
  OR t.insert
  OR t.delete
