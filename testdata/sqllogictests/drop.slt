# Tests drop database, schema and drop objects

# Test dropping databases

statement ok
create external database drop_db from debug;

query TTT
select database_name, external, datasource from glare_catalog.databases where database_name='drop_db';
----
drop_db t debug

statement ok
drop database drop_db;

statement error
drop database drop_db;

statement ok
drop database if exists drop_db;

query TTT
select database_name, external, datasource from glare_catalog.databases where database_name='drop_db';
----

# Test dropping multiple databases

statement ok
create external database drop_db1 from debug;

statement ok
create external database drop_db2 from debug;

query T
select a from drop_db1.public.never_ending LIMIT 1;
----
1

query T rowsort
select b from drop_db2.public.never_ending LIMIT 1;
----
2

statement ok
drop database drop_db1, drop_db2;

statement error
select a from drop_db1.public.never_ending LIMIT 1;

statement error
select b from drop_db2.public.never_ending LIMIT 1;

# Test dropping tunnels

statement ok
create tunnel drop_tunnel from debug;

query TT
select tunnel_name, tunnel_type from glare_catalog.tunnels where tunnel_name='drop_tunnel';
----
drop_tunnel debug

statement ok
drop tunnel drop_tunnel;

statement error
drop tunnel drop_tunnel;

statement ok
drop tunnel if exists drop_tunnel;

query TT
select tunnel_name, tunnel_type from glare_catalog.tunnels where tunnel_name='drop_tunnel';
----

# Test dropping multiple tunnels

statement ok
create tunnel drop_tunnel1 from debug;

statement ok
create tunnel drop_tunnel2 from debug;

query TT rowsort
select tunnel_name, tunnel_type from glare_catalog.tunnels where tunnel_name like 'drop_tunnel%';
----
drop_tunnel1  debug
drop_tunnel2  debug

statement ok
drop tunnel drop_tunnel1, drop_tunnel2;

query TT
select tunnel_name, tunnel_type from glare_catalog.tunnels where tunnel_name like 'drop_tunnel%';
----

# Test dropping credentials

statement ok
create credentials drop_credentials provider debug options (table_type = 'never_ending');

query TT
select credentials_name, provider
    from glare_catalog.credentials where credentials_name='drop_credentials';
----
drop_credentials debug

statement ok
drop credentials drop_credentials;

statement error
drop credentials drop_credentials;

statement ok
drop credentials if exists drop_credentials;

query TT
select credentials_name, provider
    from glare_catalog.credentials where credentials_name='drop_credentials';
----

# Test dropping multiple credentialss

statement ok
create credentials drop_credentials1 provider debug options (table_type = 'never_ending');

statement ok
create credentials drop_credentials2 provider debug options (table_type = 'never_ending');

query TT rowsort
select credentials_name, provider
    from glare_catalog.credentials where credentials_name like 'drop_credentials%';
----
drop_credentials1  debug
drop_credentials2  debug

statement ok
drop credentials drop_credentials1, drop_credentials2;

query TT
select credentials_name, provider
    from glare_catalog.credentials where credentials_name like 'drop_credentials%';
----

# Test dropping empty schema

statement ok
create schema drop_schema;

statement ok
drop schema drop_schema;

statement error
drop schema drop_schema;

statement ok
drop schema if exists drop_schema;

query T
select schema_name from glare_catalog.schemas where schema_name='drop_table';
----

# Test drop schema with objects and drop table

statement ok
create schema drop_table;

statement ok
create external table drop_table.test
    from debug
    options (
        table_type = 'never_ending',
    );

query III
select a, b, c from drop_table.test limit 1;
----
1 2 3

statement ok
create table native_table (a int);

statement ok
insert into native_table values (1);

statement ok
drop table native_table;

# We cannot drop a schema before removing the table or views (child objects on
# schema) without CASCADE.
statement error
drop schema drop_table;

query T
select schema_name from glare_catalog.schemas where schema_name='drop_table';
----
drop_table

# Drop schema even with child objects.
statement ok
drop schema drop_table cascade;

query TT
select schema_name, table_name from glare_catalog.tables where schema_name='drop_table' and table_name='test';
----

# Drop view

statement ok
create view test_view as select 1;

statement ok
drop view test_view;

statement error
drop view test_view;

statement ok
drop view if exists test_view;

query TT
select schema_name, view_name from glare_catalog.views where schema_name='drop_table' and view_name='test_view';
----

# Drop table and child objects on schema

statement ok
create schema drop_table;

statement ok
create external table drop_table.test
    from debug
    options (
        table_type = 'never_ending'
    );

statement ok
drop table drop_table.test;

statement error
drop table drop_table.test;

statement ok
drop table if exists drop_table.test;

# Test dropping multiple tables

statement ok
create external table drop_table1 from debug options ( table_type = 'never_ending' );

statement ok
create external table drop_table2 from debug options ( table_type = 'never_ending' );

query T
select a from drop_table1 limit 1;
----
1

query T
select b from drop_table2 limit 1;
----
2

statement ok
drop table drop_table1, drop_table2;

statement error
select a from drop_table1 limit 1;

statement error
select b from drop_table2 limit 1;

query TT
select schema_name, table_name from glare_catalog.tables where schema_name='drop_table' and table_name='test';
----

# Now that all dependent objects have been dropped we can drop the schema
statement ok
drop schema drop_table;

query T
select schema_name from glare_catalog.schemas where schema_name='drop_table';
----

# Prevent dropping builtin objects.

statement error
drop database default;

statement error
drop schema glare_catalog;

statement error
drop table glare_catalog.databases;
