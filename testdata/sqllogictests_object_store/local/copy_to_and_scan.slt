# Basic test for copy to.

statement ok
CREATE TEMP TABLE copy_to_table (a INT, b TEXT);

statement ok
INSERT INTO copy_to_table VALUES
	(1, 'abc'),
	(2, 'def');

statement ok
COPY ( SELECT * FROM copy_to_table LIMIT 1 )
	TO local
	OPTIONS (
		location = '${TMP}/query_copy.csv'
	);

query IT
SELECT a, b FROM csv_scan('${TMP}/query_copy.csv');
----
1	abc

statement ok
COPY ( SELECT * FROM copy_to_table LIMIT 1 )
	TO '${TMP}/query_copy_url.csv';

query IT
SELECT a, b FROM csv_scan('${TMP}/query_copy_url.csv');
----
1	abc

# Copying again overrides the file.

statement ok
COPY ( SELECT b FROM copy_to_table ORDER BY a DESC )
	TO '${TMP}/query_copy_url.csv';

query T rowsort
SELECT * FROM csv_scan('${TMP}/query_copy_url.csv');
----
abc
def

statement ok
COPY current_session.copy_to_table
	TO '${TMP}/table_copy_url.csv';

query IT rowsort
SELECT a, b FROM csv_scan('${TMP}/table_copy_url.csv');
----
1	abc
2	def

# Test "FORMAT" parameter

statement ok
COPY copy_to_table
	TO '${TMP}/csv_copy_without_ext'
	FORMAT csv;

query IT rowsort
SELECT a, b FROM csv_scan('${TMP}/csv_copy_without_ext');
----
1	abc
2	def

# Test if format is tried by file extension.

# JSON format
statement ok
COPY default.current_session.copy_to_table
	TO '${TMP}/copy_file.json';

query IT rowsort
SELECT a, b FROM ndjson_scan('${TMP}/copy_file.json');
----
1	abc
2	def

# Parquet format
statement ok
COPY default.current_session.copy_to_table
	TO '${TMP}/copy_file.parquet';

query IT rowsort
SELECT a, b FROM parquet_scan('${TMP}/copy_file.parquet');
----
1	abc
2	def

# Use default format if it can't be determined.

statement ok
COPY copy_to_table TO '${TMP}/random_file';

query IT rowsort
SELECT a, b FROM csv_scan('${TMP}/random_file');
----
1	abc
2	def

# Unsupported format errors

statement error unsupported output format
COPY copy_to_table TO '${TMP}/random_file.abc' FORMAT abc;

# Multiple URLs

query IT rowsort rowsort
SELECT a, b FROM csv_scan([
	'${TMP}/query_copy.csv',
	'${TMP}/csv_copy_without_ext'
]);
----
1	abc
1	abc
2	def

# Glob pattern

statement ok
COPY ( SELECT * FROM generate_series(1, 2) )
	TO '${TMP}/some_glob_1.parquet';

statement ok
COPY ( SELECT * FROM generate_series(3, 4) )
	TO '${TMP}/another_glob_2' FORMAT parquet;

query I rowsort
SELECT * FROM parquet_scan('${TMP}/*_glob_*');
----
1
2
3
4

# Multiple glob patterns

query I rowsort
SELECT * FROM parquet_scan([
	'${TMP}/*_glob_*.parquet',
	'${TMP}/*_glob_*'
]);
----
1
1
2
2
3
4

# Check glob for non-df file formats (bson or json).

statement ok
COPY ( VALUES (1), (3) )
	TO '${TMP}/non-df-glob-1.bson';

statement ok
COPY ( VALUES (2), (4) )
	TO '${TMP}/non-df-glob-2.bson';

query I rowsort
SELECT * FROM '${TMP}/non-df-glob-*.bson';
----
1
2
3
4

# We don't work well with different schemas (column names).

statement ok
COPY ( SELECT 1 AS a ) TO '${TMP}/diff-schema-a.parquet';

statement ok
COPY ( SELECT 2 AS b ) TO '${TMP}/diff-schema-b.parquet';

# TODO: We need a better error message here.
statement error is declared as non-nullable but contains null values
SELECT * FROM parquet_scan('${TMP}/diff-schema-*.parquet')
