# Test filter pushdown optimization rule.

statement ok
CREATE TEMP TABLE t1 (i INT);

statement ok
INSERT INTO t1 VALUES (1), (2), (3), (NULL);

statement ok
SET allow_nested_loop_join TO false;

# Cross join -> comparison join

query II rowsort
SELECT * FROM t1 a1, t1 a2 WHERE a1.i = a2.i;
----
1  1
2  2
3  3

query II rowsort
SELECT * FROM t1 a1, t1 a2 WHERE a1.i = a2.i AND a1.i > 1;
----
2  2
3  3

query II rowsort
SELECT * FROM t1 a1, t1 a2 WHERE a1.i = a2.i AND a2.i > 1;
----
2  2
3  3

query II rowsort
SELECT * FROM t1 a1, t1 a2 WHERE a1.i = a2.i AND a2.i > 1 AND 1 = 1;
----
2  2
3  3

# Should work with ORDER BY clause
query II rowsort
SELECT * FROM t1 a1, t1 a2 WHERE a1.i = a2.i ORDER BY 1;
----
1  1
2  2
3  3

# Pushdown should happen within a materialized CTE.
query II rowsort
WITH cte AS MATERIALIZED (
  SELECT * FROM t1 a1, t1 a2 WHERE a1.i = a2.i
)
SELECT * FROM cte;
----
1  1
2  2
3  3

# Should push down through aggregate.
query III rowsort
SELECT * FROM (
  SELECT sum(a), a, b
    FROM t1 AS alias1(a), t1 AS alias2(b)
    GROUP BY a, b
  ) WHERE a = b;
----
1  1  1
2  2  2
3  3  3

# Partially push down filter, 's > 2' still needs to be applied to output.
query III rowsort
SELECT * FROM (
  SELECT sum(a) as s, a, b
    FROM t1 AS alias1(a), t1 AS alias2(b)
    GROUP BY a, b
  ) WHERE a = b AND s > 2;
----
3  3  3
