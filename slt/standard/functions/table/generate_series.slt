# generate_series

statement error
select * from generate_series(1);

statement error
select * from generate_series(1, 2, 3, 4);

statement error Step cannot be zero
select * from generate_series(1, 2, 0);

query I
select * from generate_series(1, 4);
----
1
2
3
4

# Match postgres behavior where 'step' always defaults to positive 1, and so no
# rows are returned in this case.
query I
select * from generate_series(4, 1);
----

query I
select * from generate_series(1, 5, 2);
----
1
3
5

query I
select * from generate_series(5, 1, -2);
----
5
3
1

query I
select * from generate_series(4, 3);
----

query I
select * from generate_series(4, 3, 1);
----

query I
select * from generate_series(3, 4, -1);
----

# Should lazily allocate
query I
select count(*) from generate_series(1, 20000000);
----
20000000

# Ensure the stream generates the correct numbers all the way through.
query I
select sum(a) from generate_series(1, 200000) as t(a);
----
20000100000

# query R
# select * from generate_series(1.1, 4, 1.3);
# ----
# 1.1
# 2.4
# 3.7

# query R
# select * from generate_series(1.1, 4.1);
# ----
# 1.1
# 2.1
# 3.1
# 4.1

# query R
# select * from generate_series(4.1, 1.0, -1.0);
# ----
# 4.1
# 3.1
# 2.1
# 1.1

statement error
select * from generate_series('hi', 1.0, -1.0);

# In subquery

query I
select i * 2 from (select * from generate_series(1, 5)) as t(i);
----
2
4
6
8
10

# Lateral input

query TT
describe select * from (values (3), (4)) v(a), generate_series(1, a) order by 1,2
----
a                Int32
generate_series  Int64

query II
select * from (values (3), (4)) v(a), generate_series(1, a) order by 1,2;
----
3 1
3 2
3 3
4 1
4 2
4 3
4 4

# TODO: Not yet implemented: dependent join pushdown for node: CrossJoin ...
# Also need to be careful since this is a nested lateral.
# query III
# select * from (values (3), (4)) v(a), generate_series(1, a) g1, generate_series(a, 5) g2 order by 1,2,3;
# ----

query III
select * from (values (3, 6), (4, 5)) v(a, b), generate_series(a, b) order by 1,2,3;
----
3  6  3
3  6  4
3  6  5
3  6  6
4  5  4
4  5  5
