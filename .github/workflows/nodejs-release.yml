# Build and publish nodejs bindings.
#
# Publishing only happens for tag pushes with the tag beginning with 'v'.
name: nodejs release

on:
  schedule:
    # Run every Monday at 12:00
    - cron: 0 12 * * 1
  push:
    tags:
      - "*"
  workflow_dispatch:

defaults:
  run:
    working-directory: bindings/nodejs

concurrency:
  group: nodejs-release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write

env:
  DEBUG: napi:*
  APP_NAME: "glaredb"
  MACOSX_DEPLOYMENT_TARGET: "10.13"
  PROTOC: "${{ github.workspace }}/deps/protoc/bin/protoc"

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        settings:
          - host: macos-12-xl
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
          - host: windows-latest-8-cores
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: ubuntu-2004-8-cores
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -eux &&
              curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to . &&
              ./just protoc && 
              export PROTOC="$PWD/deps/protoc/bin/protoc" &&
              cd bindings/nodejs &&
              yarn build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: macos-12-xl
            target: aarch64-apple-darwin
            build: |
              rustup target add aarch64-apple-darwin
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              yarn build --target aarch64-apple-darwin
              strip -x *.node
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v1
      - run: just protoc

      - name: Setup node
        uses: actions/setup-node@v4
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 20
          check-latest: true

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.1
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Setup node x86
        uses: actions/setup-node@v4
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 20
          check-latest: true
          architecture: x86
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: bindings/nodejs/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    name: Publish
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    runs-on: ubuntu-2004-8-cores
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v1
      - run: just protoc

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
          registry-url: "https://registry.npmjs.org"
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: bindings/nodejs/artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
