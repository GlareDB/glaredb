name: GlareDB CI

on: [push, workflow_dispatch]

# Jobs:
# build -> Builds binaries. This will build and cache deps as well.
# test -> Runs tests, using cache from 'build'.
# integration -> Runs integration tests, using cache from 'build'.
#
# Cachix is used for caching.

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest-8-cores
    concurrency:
      group: build-ci-${{ github.ref }}
      cancel-in-progress: true
    steps:
     - name: Checkout
       uses: actions/checkout@v3

     - name: Install nix
       uses: cachix/install-nix-action@v20
       with:
         extra_nix_config: |
           access-tokens = github=${{ github.token }}

     - name: Configure Cachix
       uses: cachix/cachix-action@v12
       continue-on-error: true
       with:
         name: glaredb-ci
         authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

     - name: Build
       run: |
         nix build .#glaredb-bin -L
         nix build .#slt-runner-bin -L
         nix build .#pgprototest-bin -L

  test:
    needs: build
    name: Tests
    runs-on: ubuntu-latest-8-cores
    concurrency:
      group: test-ci-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install nix
        uses: cachix/install-nix-action@v20
        with:
          extra_nix_config: |
            access-tokens = github=${{ github.token }}

      - name: Configure Cachix
        uses: cachix/cachix-action@v12
        continue-on-error: true
        with:
          name: glaredb-ci
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Run Checks
        run: nix flake check -L

  integration:
    needs: build
    name: Integration tests
    runs-on: ubuntu-latest-8-cores
    concurrency:
      group: integ-ci-${{ github.ref }}
      cancel-in-progress: true

    env:
      GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}
      GCP_PROJECT_ID: glaredb-artifacts
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install nix
        uses: cachix/install-nix-action@v20
        with:
          extra_nix_config: |
            access-tokens = github=${{ github.token }}

      - name: Configure Cachix
        uses: cachix/cachix-action@v12
        continue-on-error: true
        with:
          name: glaredb-ci
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v1

      - name: Download testdata from GCS
        run: ./scripts/prepare-testdata.sh

      - name: SQL Logic Tests
        # Use globstar to ensure that all subdirectories are expanded.
        run: |
          shopt -s globstar
          nix run .#slt-runner -- -v embedded testdata/sqllogictests/**/*.slt

      - name: SQL Logic Tests (BigQuery)
        run: |
          shopt -s globstar
          if ./scripts/files-changed-in-branch.sh \
            "scripts/prepare-testdata.sh" \
            "scripts/create-test-bigquery-db.sh" \
            "testdata/sqllogictests_datasources_common/data" \
            "testdata/sqllogictests_bigquery/data"
          then
            export GCP_PROJECT_ID=glaredb-dev-playground
            export BIGQUERY_DATASET_ID=$(./scripts/create-test-bigquery-db.sh)
          else
            export BIGQUERY_DATASET_ID=glaredb_test
          fi
          nix run .#slt-runner -- -v embedded testdata/sqllogictests_bigquery/**/*.slt

      - name: SQL Logic Tests (GCS)
        run: |
          shopt -s globstar
          export GCS_BUCKET_NAME=glaredb-test
          nix run .#slt-runner -- -v embedded testdata/sqllogictests_object_store/gcs/**/*.slt

      - name: SQL Logic Tests (S3)
        run: |
          shopt -s globstar
          export AWS_S3_REGION=us-east-1
          export AWS_S3_BUCKET_NAME=glaredb-test
          nix run .#slt-runner -- -v embedded testdata/sqllogictests_object_store/s3/**/*.slt

      - name: SQL Logic Tests (Local Object Store)
        run: |
          shopt -s globstar
          nix run .#slt-runner -- -v embedded testdata/sqllogictests_object_store/local/**/*.slt

      - name: SQL Logic Tests (Postgres)
        run: |
          shopt -s globstar
          export POSTGRES_CONN_STRING=$(./scripts/create-test-postgres-db.sh)
          nix run .#slt-runner -- -v embedded testdata/sqllogictests_postgres/**/*.slt

      - name: SQL Logic Tests (MySQL)
        run: |
          shopt -s globstar
          export MYSQL_CONN_STRING=$(./scripts/create-test-mysql-db.sh)
          nix run .#slt-runner -- -v embedded testdata/sqllogictests_mysql/**/*.slt

      - name: Protocol Tests
        run: ./scripts/protocol-test.sh
