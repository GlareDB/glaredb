name: Release

on:
  workflow_dispatch:
    inputs:
      # This tag will be used to to create the github release.
      #
      # A script is used to check that the tag provided matches the version
      # found in Cargo.toml. If the tag/version doesn't match, the script
      # errors, and we don't upload anything.
      #
      # This is optional since we should be able to run the release step on
      # non-main branches to build the artifiacts. This input is required when
      # running on main.
      tag:
        description: 'Tag to create for the release (format: v0.0.0), skip if not main'
        required: false

concurrency:
  group: release-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cli-manylinux-x86_64:
    name: Build CLI (Linux x86-64)
    runs-on: ubuntu-latest
    container:
      # Image TBD, gives us glibc 2.28. Not sure if that's common enough.
      image: quay.io/pypa/manylinux_2_28_x86_64
      options: --user root

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          # Install rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          # Confirm
          rustc --version

      - name: Build CLI
        run: |
          source $HOME/.cargo/env
          cargo build --bin glaredb --release
          ls -l target/release
          mv target/release/glaredb glaredb-linux-x86_64

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: glaredb-linux-x86_64
          path: glaredb-linux-x86_64

  cli-manylinux-arm64:
    name: Build CLI (Linux arm64)
    runs-on: ubuntu-2404-arm-4-core
    container:
      # TODO: See linux-x8_64
      image: ghcr.io/rust-cross/manylinux_2_28-cross:aarch64
      options: --user root

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          # Install rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          . $HOME/.cargo/env
          # Confirm
          rustc --version

      - name: Build CLI
        run: |
          . $HOME/.cargo/env
          cargo build --bin glaredb --release
          ls -l target/aarch64-unknown-linux-gnu/release
          mv target/aarch64-unknown-linux-gnu/release/glaredb glaredb-linux-arm64

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: glaredb-linux-arm64
          path: glaredb-linux-arm64

  cli-macos-arm64:
    name: Build CLI (macOS arm64)
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # TODO: Also build version for x86_64, then use `lipo -create -output glaredb-macos-universal glaredb-macos-arm6 glaredb macos-x86_64`
      # We'd to upload all three versions of the binary.
      - name: Build CLI
        run: |
          cargo build --bin glaredb --release
          ls -l target/release

      # TODO: Update to use business cert when have that.
      - name: Codesign
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.MACOS_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          CERT_NAME: ${{ secrets.MACOS_CERT_NAME }}
        run: ./scripts/codesign_macos.sh

      - name: Notarize
        env:
          APPLE_ID: ${{ secrets.MACOS_NOTARIZE_APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.MACOS_NOTARIZE_APPLE_TEAM_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.MACOS_NOTARIZE_APPLE_APP_PASSWORD }}
        run: ./scripts/notarize_macos.sh

      # Done after the above code signing, notarizing since those assume the
      # binary is in the default location.
      - name: Move binary
        run: mv target/release/glaredb glaredb-macos-arm64

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: glaredb-macos-arm64
          path: glaredb-macos-arm64

    
  python-macos-arm64:
    name: Build Python (macOS arm64)
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Maturin build
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist
          working-directory: crates/glaredb_python
          container: 'off'

      - name: Upload python wheels
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: wheels-macos-arm64
          path: crates/glaredb_python/dist

  python-manylinux-x86_64:
    name: Build python (Linux x86-64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maturin build
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist
          working-directory: crates/glaredb_python
          manylinux: 'auto'

      - name: Upload python wheels
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: wheels-linux-x86_64
          path: crates/glaredb_python/dist

  python-manylinux-arm64:
    name: Build python (Linux arm64)
    runs-on: ubuntu-2404-arm-4-core
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maturin build
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist
          working-directory: crates/glaredb_python
          # Typically we'd want to use 2.17, but the combination of 2.17 with
          # ARM seems to cause compilation failures with ring.
          #
          # See: <https://github.com/briansmith/ring/issues/1728>
          manylinux: 2_28

      - name: Upload python wheels
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: wheels-linux-arm64
          path: crates/glaredb_python/dist

  node-macos-arm64:
    name: Build Node.js (macOS arm64)
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'

      - name: Install Rust toolchain
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          rustc --version

      - name: Build Node.js bindings
        working-directory: crates/glaredb_node
        run: |
          source $HOME/.cargo/env
          npm install
          npm run build

      - name: Upload Node.js bindings
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: node-macos-arm64
          path: crates/glaredb_node

  node-manylinux-x86_64:
    name: Build Node.js (Linux x86-64)
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'

      - name: Install Rust toolchain
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          rustc --version

      - name: Build Node.js bindings
        working-directory: crates/glaredb_node
        run: |
          source $HOME/.cargo/env
          npm install
          npm run build

      - name: Upload Node.js bindings
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: node-linux-x86_64
          path: crates/glaredb_node

  node-manylinux-arm64:
    name: Build Node.js (Linux arm64)
    runs-on: ubuntu-2404-arm-4-core
    container:
      image: ghcr.io/rust-cross/manylinux_2_28-cross:aarch64
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'

      - name: Install Rust toolchain
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          . $HOME/.cargo/env
          rustc --version

      - name: Build Node.js bindings
        working-directory: crates/glaredb_node
        run: |
          . $HOME/.cargo/env
          npm install
          npm run build

      - name: Upload Node.js bindings
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: node-linux-arm64
          path: crates/glaredb_node

  # Debug job that lists the binaries using the same path that's used in the gh
  # release job.
  #
  # Always runs, good for sanity checking.
  list-cli-binaries:
    name: List CLI binaries
    needs:
      - cli-macos-arm64
      - cli-manylinux-x86_64
      - cli-manylinux-arm64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v5
        with:
          path: cli
          pattern: glaredb-*
          merge-multiple: true

      - name: List binaries
        run: ls -R cli

  list_node:
    name: List Node.js artifacts
    needs:
      - node-macos-arm64
      - node-manylinux-x86_64
      - node-manylinux-arm64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Node.js artifacts
        uses: actions/download-artifact@v5
        with:
          path: node
          pattern: node-*
          merge-multiple: true

      - name: List Node.js artifacts
        run: ls -R node

  # ONLY RUNS ON 'main'
  #
  # This job will only run when all cli/python builds have completed. This will
  # will also check that the version tag we're using matches the version found
  # in Cargo.toml.
  #
  # If the tag matches the version found in Cargo.toml, we'll go ahead and
  # create and push a git tag.
  #
  # All below 'publish' steps require this to pass.
  release-gate:
    name: Release gate
    needs:
      - cli-macos-arm64
      - cli-manylinux-x86_64
      - cli-manylinux-arm64
      - python-macos-arm64
      - python-manylinux-x86_64
      - python-manylinux-arm64
      - node-macos-arm64
      - node-manylinux-x86_64
      - node-manylinux-arm64
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Check tag with Cargo.toml
        run: ./scripts/assert_cargo_version.sh ${{ github.event.inputs.tag }}

      - name: Create and push tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ github.event.inputs.tag }}
          git push origin ${{ github.event.inputs.tag }}

  # ONLY RUNS ON 'main'
  create-github-release:
    name: Create github release
    needs: [release-gate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v5
        with:
          path: cli
          pattern: glaredb-*
          merge-multiple: true

      - name: Create release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.event.inputs.tag }} \
              cli/* \
              --generate-notes

  # ONLY RUNS ON 'main'
  publish-crates:
    name: Publish crates
    needs: [release-gate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: ./scripts/ci_publish_crates.sh

  # ONLY RUNS ON 'main'
  python-pypi-upload:
    name: Upload to pypi
    needs: [release-gate]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v5
        with:
          path: wheels
          pattern: wheels-*
          merge-multiple: true

      - name: List wheels
        run: ls -R wheels

      - name: Upload to pypi
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          working-directory: wheels
          command: upload
          args: ./*.whl

  # ONLY RUNS ON 'main'
  wasm:
    name: Build and Publish WASM
    needs: [release-gate]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build wasm
        run: wasm-pack build crates/glaredb_wasm/ --scope glaredb

      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: wasm-pack publish crates/glaredb_wasm/

