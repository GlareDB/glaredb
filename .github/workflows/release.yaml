name: Release

on:
  push:
    branches:
      - sean/binaries
  workflow_dispatch:

concurrency:
  group: release-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cli-manylinux-x86_64:
    name: Build CLI (Linux x86-64)
    runs-on: ubuntu-latest
    container:
      # Image TBD, gives us glibc 2.28. Not sure if that's common enough.
      image: quay.io/pypa/manylinux_2_28_x86_64
      options: --user root

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install protoc
        run: ./scripts/install_protoc_linux.sh

      - name: Install Rust toolchain
        run: |
          # Install rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          # Confirm
          rustc --version

      - name: Build CLI
        run: |
          source $HOME/.cargo/env
          cargo build --bin glaredb --release
          ls -l target/release

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: glaredb-linux-x86_64
          path: target/release/glaredb

  cli-manylinux-arm64:
    name: Build CLI (Linux arm64)
    runs-on: ubuntu-latest
    container:
      # TODO: See linux-x8_64
      image: ghcr.io/rust-cross/manylinux_2_28-cross:aarch64
      options: --user root

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install protoc
        run: ./scripts/install_protoc_linux.sh

      - name: Install Rust toolchain
        run: |
          # Install rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          # Confirm
          rustc --version

      - name: Build CLI
        run: |
          source $HOME/.cargo/env
          cargo build --bin glaredb --release
          ls -l target/release

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: glaredb-linux-arm64
          path: target/release/glaredb

  # wasm:
  #   name: Build and Publish WASM
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Install protoc
  #       uses: arduino/setup-protoc@v3
  #       with:
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Install wasm-pack
  #       run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

  #     - name: Build wasm
  #       run: wasm-pack build crates/glaredb_wasm/ --scope glaredb

  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.x'
  #         registry-url: 'https://registry.npmjs.org'

  #     - name: Publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #       run: wasm-pack publish crates/glaredb_wasm/
    
  # python-macos-arm:
  #   name: Build Python (macOS ARM)
  #   runs-on: macos-14
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Install protoc
  #       uses: arduino/setup-protoc@v3
  #       with:
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Setup python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'

  #     - name: Maturin build
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         args: --release --out dist
  #         working-directory: crates/rayexec_python
  #         container: 'off'

  #     - name: Upload python wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-macos-arm
  #         path: crates/rayexec_python/dist

  # python-manylinux-x86_64:
  #   name: Build python (Linux x86-64)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Maturin build
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         before-script-linux: "../../scripts/install_protoc_linux.sh" # Relative to working dir
  #         args: --release --out dist
  #         working-directory: crates/rayexec_python
  #         manylinux: 'auto'

  #     - name: Upload python wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-linux-x86_64
  #         path: crates/rayexec_python/dist

  # python-manylinux-arm64:
  #   name: Build python (Linux Arm64)
  #   runs-on: ubuntu-2404-arm-4-core
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Maturin build
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         before-script-linux: "../../scripts/install_protoc_linux_arm.sh" # Relative to working dir
  #         args: --release --out dist
  #         working-directory: crates/rayexec_python
  #         # Typically we'd want to use 2.17, but the combination of 2.17 with
  #         # ARM seems to cause compilation failures with ring.
  #         #
  #         # See: <https://github.com/briansmith/ring/issues/1728>
  #         manylinux: 2_28

  #     - name: Upload python wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-linux-arm64
  #         path: crates/rayexec_python/dist

  # python-pypi-upload:
  #   name: Upload to pypi
  #   needs: [python-macos-arm, python-manylinux-x86_64, python-manylinux-arm64]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download wheels
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: wheels
  #         pattern: wheels-*
  #         merge-multiple: true

  #     - name: List wheels
  #       run: ls -R wheels

  #     - name: Upload to pypi
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       with:
  #         working-directory: wheels
  #         command: upload
  #         args: ./*.whl

